{"version":3,"sources":["components/HapticForm.tsx","firebase/index.ts","components/HapticList.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["AlertSeverity","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","db","storage","haptics","collection","app","initializeApp","this","firestore","id","ref","child","delete","title","description","tags","file","onProgress","onError","onComplete","uuidv4","hapticRef","getStorageRef","uploadTask","put","fileExtension","name","split","pop","on","snapshot","uploadProgress","bytesTransferred","totalBytes","error","updateMetadata","contentDisposition","hapticDoc","ID","Title","Author","Description","Tags","BlobType","BlobPath","fullPath","doc","set","deleteHapticFileFromStorage","FirebaseContext","React","createContext","tableIcons","Add","forwardRef","props","AddBox","Check","Clear","Delete","DeleteOutline","DetailPanel","ChevronRight","Edit","Export","SaveAlt","Filter","FilterList","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Search","SortArrow","ArrowDownward","ThirdStateCheck","Remove","ViewColumn","tableColumns","field","render","rowData","download","href","DownloadURL","HapticList","state","data","firebase","onSnapshot","result","docs","map","downloadURLs","getDownloadURL","Promise","all","then","results","newData","idx","setState","tableData","join","columns","icons","localization","body","editRow","deleteText","style","padding","editable","onRowDelete","rowToDelete","resolve","setTimeout","deleteHaptic","components","Container","children","options","pageSize","Component","initState","undefined","alertSeverity","alertText","keyCodes","inputStyle","maxWidth","marginTop","marginBottom","display","flexWrap","HapticForm","onFile","event","files","target","reader","FileReader","onload","e","jsonObj","JSON","parse","toString","metadata","readAsText","onSubmit","preventDefault","length","addHaptic","progress","Success","Error","Typography","variant","Button","component","color","type","onChange","Chip","label","TextField","value","onAdd","chip","onDelete","_","filter","i","newChipKeyCodes","LinearProgress","Alert","severity","paperStyle","margin","App","Consumer","Paper","Boolean","window","location","hostname","match","ReactDOM","StrictMode","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.96cf523e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport  Firebase  from '../firebase';\n\nimport { Button, Chip, LinearProgress, TextField, Typography } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport ChipInput from 'material-ui-chip-input'\n\nenum AlertSeverity {\n  Error = 'error',\n  Warning = 'warning',\n  Info = 'info',\n  Success = 'success'\n}\n\ntype HapticFormProps = {\n  firebase: Firebase;\n}\n\ntype HapticFormState = {\n  file?: File;\n  title: string;\n  description: string;\n  tags: string[];\n  // 0 to 100\n  uploadProgress?: number;\n\n  alertSeverity?: AlertSeverity\n  alertText: string;\n}\n\nconst initState = {\n  file: undefined,\n  title: '',\n  description: '',\n  tags: [],\n  uploadProgress: undefined,\n  alertSeverity: undefined,\n  alertText: ''\n}\n\nconst keyCodes = {\n  space: 32,\n  comma: 188\n}\n\nconst inputStyle : React.CSSProperties = {\n  maxWidth: '360px',\n  marginTop: '20px',\n  marginBottom: '20px',\n  display: 'flex',\n  flexWrap: 'wrap'\n}\n\nclass HapticForm extends Component<HapticFormProps, HapticFormState> {\n  constructor(props: HapticFormProps) {\n    super(props);\n    this.state = { ...initState }\n  }\n\n  onFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    const file = files ? files[0] : undefined;\n\n    if (file) {\n      const title = file.name.split('.')[0]\n      this.setState({ file, title })\n    }\n    else {\n      this.setState({ file })\n    }\n\n    // Get description from AHAP file, if possible\n    if (file) {\n      const reader = new FileReader()\n      reader.onload = (e) => {\n        if (reader.result) {\n          const jsonObj = JSON.parse(reader.result.toString());\n          if ('Metadata' in jsonObj) {\n            const metadata = jsonObj['Metadata']\n            if ('Description' in metadata) {\n              const description = metadata['Description']\n              this.setState({ description })\n            }\n          }\n        }\n      }\n      reader.readAsText(file)\n    }\n  }\n \n  onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    const { firebase } = this.props;\n    const { title, description, tags, file } = this.state;\n \n    event.preventDefault();\n\n    if (title.length === 0) {\n      this.setState({ alertSeverity: AlertSeverity.Error, alertText: \"Please enter a title.\" })\n      return;\n    }\n\n    if (!file) {\n      this.setState({ alertSeverity: AlertSeverity.Error, alertText: \"Please upload a file.\" })\n      return;\n    }\n\n    const onProgress = (progress: number) => {\n      this.setState({ uploadProgress: progress });\n    }\n\n    const onError = (error: Error) => {}\n\n    const onComplete = () => {\n      // Reset state to clear form\n      this.setState({...initState, alertSeverity: AlertSeverity.Success, alertText: \"Uploaded \" + title + \"!\"});\n    };\n\n    firebase.addHaptic(title, description, tags, file, onProgress, onError, onComplete);\n  }\n\n  render() {\n    const { \n      alertSeverity,\n      alertText,\n      description,\n      file,\n      tags,\n      title,\n      uploadProgress,\n    } = this.state;\n\n    return (\n      <>\n        <Typography variant=\"h6\">Add AHAP Entry</Typography>\n        <form onSubmit={this.onSubmit}>\n          <Button\n            variant=\"outlined\"\n            component=\"label\"\n            color=\"primary\"\n            style={inputStyle}\n          >\n            Upload File\n            <input\n              id=\"contained-button-file\"\n              name=\"File\"\n              type=\"file\"\n              // accept='.ahap'\n              style={{ display: 'none' }}\n              onChange={this.onFile}\n            />\n          </Button>\n          { file && <Chip style={inputStyle} label={'Selected: ' + file.name} /> }\n          <TextField\n            name=\"Title\"\n            value={title}\n            onChange={(event) => this.setState({ title: event.target.value })}\n            type=\"text\"\n            label=\"Title\"\n            variant=\"outlined\"\n            style={inputStyle}\n          />\n          <TextField\n            name=\"Description\"\n            value={description}\n            onChange={(event) => this.setState({ description: event.target.value })}\n            type=\"text\"\n            label=\"Description\"\n            variant=\"outlined\"\n            style={inputStyle}\n          />\n          <ChipInput\n            value={tags}\n            onAdd={(chip) => this.setState({ tags: [...tags, chip ]})}\n            onDelete={(_, idx) => this.setState({ tags: tags.filter((_, i) => i !== idx) })}\n            // onChange={(chips: string[]) => this.setState({ tags: chips })}\n            newChipKeyCodes={[keyCodes.comma, keyCodes.space]}\n            label=\"Tags\"\n            variant=\"outlined\"\n            style={inputStyle}\n          />\n          <Button \n            type=\"submit\" \n            color=\"primary\"\n            variant=\"contained\"\n            style={inputStyle}\n          >\n            Add Haptics\n          </Button>\n          { uploadProgress !== undefined && \n            <LinearProgress \n              variant=\"determinate\"\n              style={inputStyle}\n              value={uploadProgress}\n            />\n          }\n          { alertSeverity && <Alert severity={alertSeverity}>{alertText}</Alert> }\n        </form>\n      </>\n    );\n  }\n}\n\nexport default HapticForm;","// https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial\n\nimport app from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport React from 'react';\n\nimport { HapticDoc } from '../schema';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ImageGradient } from 'material-ui/svg-icons';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\nclass Firebase {\n  db : app.firestore.Firestore;\n  storage: app.storage.Storage;\n\n  constructor() {\n    app.initializeApp(config);\n\n    this.db = app.firestore();\n    this.storage = app.storage();\n    // app.analytics();\n  }\n\n  haptics = () => this.db.collection('haptics');\n\n  getStorageRef(id: string) {\n    const storageRef = this.storage.ref();\n    return storageRef.child('HapticFiles/' + id);\n  }\n\n  deleteHapticFileFromStorage(id: string) {\n    const hapticRef = this.storage.ref().child('HapticFiles/' + id);\n    hapticRef.delete();\n  }\n\n  addHaptic(\n    title: string,\n    description: string,\n    tags: string[],\n    file: File,\n    onProgress: (progress: number) => void,\n    onError: (error: Error) => void,\n    onComplete: () => void\n  ) {\n    const id = uuidv4();\n    const hapticRef = this.getStorageRef(id)\n    const uploadTask = hapticRef.put(file)\n\n    const fileExtension = file.name.split('.').pop();\n\n    uploadTask.on('state_changed', snapshot => {\n      // Observe state changes during upload\n      const uploadProgress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      onProgress(uploadProgress);\n      // this.setState({ uploadProgress });\n    },\n    function(error) {\n      // Handle unsuccessful uploads\n      onError(error);\n    },\n    () => {\n      // Set file name of uploaded file\n      hapticRef.updateMetadata({\n        contentDisposition : \"attachment; filename=\" + file.name\n      });\n      \n      // Add entry to database\n      const hapticDoc : HapticDoc = {\n        ID: id,\n        Title: title,\n        Author: 'Tanay',\n        Description: description,\n        Tags: tags,\n        BlobType: fileExtension ? fileExtension : '',\n        BlobPath: uploadTask.snapshot.ref.fullPath\n      }\n      this.haptics().doc(id).set(hapticDoc);\n      onComplete();\n    });\n  }\n\n  deleteHaptic(id: string) {\n    this.haptics().doc(id).delete();\n    this.deleteHapticFileFromStorage(id);\n  }\n}\n \n// Create context\nconst FirebaseContext = React.createContext<Firebase | null>(null);\n\nexport { FirebaseContext };\nexport default Firebase;\n","import React, { Component, forwardRef } from 'react';\nimport  Firebase  from '../firebase';\nimport { HapticDoc } from '../schema';\nimport MaterialTable from 'material-table';\n\nimport {\n  AddBox,\n  ArrowDownward,\n  Check,\n  ChevronRight,\n  ChevronLeft,\n  Clear,\n  DeleteOutline,\n  Edit,\n  FilterList,\n  FirstPage,\n  LastPage,\n  Remove,\n  SaveAlt,\n  Search,\n  ViewColumn\n} from \"@material-ui/icons\";\n\nconst tableIcons = {\n  Add: forwardRef((props: any, ref: any) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props: any, ref: any) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props: any, ref: any) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props: any, ref: any) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props: any, ref: any) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props: any, ref: any) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props: any, ref: any) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props: any, ref: any) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props: any, ref: any) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props: any, ref: any) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props: any, ref: any) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props: any, ref: any) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props: any, ref: any) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props: any, ref: any) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props: any, ref: any) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props: any, ref: any) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props: any, ref: any) => <ViewColumn {...props} ref={ref} />)\n};\n\ntype HapticListProps = {\n  firebase: Firebase;\n}\n\ntype HapticListState = {\n  data: HapticDoc[];\n}\n\nconst tableColumns = [\n  { title: 'Title', field: 'Title', render: (rowData: any) => <a download={rowData.Title + \".\" + rowData.BlobType} href={rowData.DownloadURL}>{rowData.Title}</a> },\n  { title: 'Author', field: 'Author' },\n  { title: 'Tags', field: 'Tags' },\n  { title: 'Description', field: 'Description' },\n]\n\nclass HapticList extends Component<HapticListProps, HapticListState> {\n  constructor(props: HapticListProps) {\n    super(props);\n\n    this.state = {\n      data: []\n    }\n  }\n\n  async componentDidMount() {\n    const { firebase } = this.props;\n    firebase.haptics().onSnapshot(result => {\n      const data = result.docs.map(doc => doc.data() as HapticDoc);\n\n      // Now get any download URL\n      const downloadURLs = data.map(doc => {\n        return firebase.getStorageRef(doc.ID).getDownloadURL()\n      })\n\n      // Note: Promise.all preserves order\n      Promise.all(downloadURLs).then(results => {\n        let newData = results.map((result, idx) => {\n          return { ... data[idx], DownloadURL: result };\n        });\n\n        // Set state to received haptic doc data\n        this.setState({ data: newData });\n      })\n    });\n  }\n \n  render() {\n    const { firebase } = this.props;\n    const { data } = this.state;\n    const tableData = data.map(doc => {\n      return { ...doc, Tags: doc.Tags ? doc.Tags.join(', ') : '' }\n    })\n\n    return (\n      <MaterialTable\n        title=\"Haptic Library\"\n        columns={tableColumns}\n        data={tableData}\n        icons={tableIcons}\n        localization={{ body: { editRow: { deleteText: 'Are you sure you want to delete this haptic effect?' } } }}\n        style={{padding: '20px'}}\n        editable={{\n          onRowDelete: (rowToDelete) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n                firebase.deleteHaptic(rowToDelete.ID);\n              }, 600);\n            }),\n        }}\n        components={{\n          Container: props => <>{props.children}</>\n        }}\n        options={{ pageSize: 20 }}\n      />\n    );\n  }\n}\n\nexport default HapticList","// https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial\n\nimport React, { Component } from 'react';\nimport { FirebaseContext } from '../firebase';\nimport HapticList from './HapticList';\nimport HapticForm from './HapticForm';\n\nimport { Container, Paper, Typography } from '@material-ui/core';\n\nconst paperStyle : React.CSSProperties = {\n  padding: '50px',\n  margin: '20px'\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <FirebaseContext.Consumer>\n        {firebase => {\n          if (firebase) {\n            return (\n              <Container maxWidth=\"md\">\n                <Paper style={paperStyle}>\n                  <Typography variant=\"h4\">Haptic Library</Typography>\n                  <br/>\n                  <Typography variant=\"subtitle1\">\n                    Welcome to the Haptic Library! \n                    This tool lets you easily share haptic sensations\n                    designed for <a href=\"https://developer.apple.com/documentation/corehaptics\">iOS Core Haptics</a>, which\n                    is available on iOS 13 and on iPhone 8 or newer. To design these experiences, \n                    consider using tools such as <a href=\"https://medium.com/flawless-app-stories/haptrix-core-haptics-designer-241a47b78cd\">Haptrix</a>.\n                    After uploading, you can then view these sensations in a client app for iOS (ask Tanay for access). \n                  </Typography>\n                  <br/>\n                  <Typography variant=\"subtitle1\">NOTE: AHAP files with audio are currently not supported.</Typography>\n                </Paper>\n                <Paper style={paperStyle}>\n                  <HapticForm firebase={firebase} />\n                </Paper>\n                <Paper style={paperStyle}>\n                  <HapticList firebase={firebase} />\n                </Paper>\n              </Container>\n            )\n          }\n        }}\n      </FirebaseContext.Consumer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Firebase, { FirebaseContext } from './firebase';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseContext.Provider value = { new Firebase() }>\n      <App />\n    </FirebaseContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}