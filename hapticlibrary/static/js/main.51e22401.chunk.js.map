{"version":3,"sources":["utility.ts","firebase/index.ts","components/HapticList.tsx","components/HapticForm.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["fileToText","file","a","Promise","resolve","reject","reader","FileReader","readAsText","onloadend","e","target","result","onerror","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","db","storage","haptics","collection","app","initializeApp","this","firestore","id","ref","child","delete","title","description","tags","hapticFile","audioFile","audioParams","onHapticProgress","onAudioProgress","onError","onComplete","hapticFileName","name","fileExtension","split","pop","fileText","ahapObj","JSON","parse","filter","item","fileTextNoWhitespace","stringify","hapticBlob","Blob","type","uuidv4","audioRef","getAudioStorageRef","hapticRef","getHapticStorageRef","hapticDoc","ID","Title","Author","Description","Tags","BlobType","BlobPath","fullPath","uploadTaskHaptic","put","uploadPromises","on","TaskEvent","STATE_CHANGED","snapshot","uploadProgress","bytesTransferred","totalBytes","AudioPath","AudioParams","uploadTaskAudio","push","all","then","snapshots","updateMetadata","contentDisposition","audioFileName","FileName","doc","set","catch","deleteHapticFileFromStorage","deleteAudioFileFromStorage","_","console","FirebaseContext","React","createContext","tableIcons","Add","forwardRef","props","AddBox","Check","Clear","Delete","DeleteOutline","DetailPanel","ChevronRight","Edit","Export","SaveAlt","Filter","FilterList","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Search","SortArrow","ArrowDownward","ThirdStateCheck","Remove","ViewColumn","AlertSeverity","tableColumns","field","render","rowData","download","href","HapticDownloadURL","linkHaptic","fileName","AudioDownloadURL","linkAudio","HapticList","state","data","firebase","onSnapshot","docs","map","sort","b","strA","toUpperCase","strB","hapticPromises","getDownloadURL","audioPromises","downloadUrls","hapticURLs","audioURLs","newData","idx","setState","tableData","join","columns","icons","localization","body","editRow","deleteText","style","padding","editable","onRowDelete","rowToDelete","setTimeout","deleteHaptic","components","Container","children","options","pageSize","Component","initState","uploadProgressHaptic","uploadProgressAudio","alertDict","keyCodes","inputStyle","maxWidth","marginTop","marginBottom","display","flexWrap","getAudioParams","jsonObj","audioCustomEvent","hapticPattern","length","hp","hapticEvent","getAudioCustomEvent","audioFilePath","slice","Time","eventParameters","param","paramID","paramValue","AudioBrightness","AudioPan","AudioPitch","AudioVolume","HapticForm","onAudioFile","event","files","Object","assign","size","severity","Error","text","onHapticFile","alertKey","metadata","onSubmit","preventDefault","addHaptic","progress","error","Success","Typography","variant","Button","component","color","accept","onChange","Chip","label","Alert","Warning","TextField","value","onAdd","chip","onDelete","newChipKeyCodes","LinearProgress","keys","key","alert","paperStyle","margin","App","Consumer","Paper","Boolean","window","location","hostname","match","ReactDOM","StrictMode","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.51e22401.chunk.js","sourcesContent":["async function fileToText(file: File) : Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onloadend = e => resolve(e.target!.result as string)\n    reader.onerror = e => reject(e)\n  })\n}\n\nfunction formatBytes(bytes: number, decimals = 2) {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport { fileToText, formatBytes }","// https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial\n\nimport app from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport React from 'react';\n\nimport { HapticDoc, AudioParams } from '../schema';\nimport { v4 as uuidv4 } from 'uuid';\nimport { fileToText } from '../utility'\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\n// These should exist in Firebase storage\nconst HAPTIC_STORAGE_PATH = 'HapticFiles/'\nconst AUDIO_STORAGE_PATH = 'AudioFiles/'\n\nclass Firebase {\n  db : app.firestore.Firestore;\n  storage: app.storage.Storage;\n\n  constructor() {\n    app.initializeApp(config);\n\n    this.db = app.firestore();\n    this.storage = app.storage();\n    // app.analytics();\n  }\n\n  haptics = () => this.db.collection('haptics');\n\n  getHapticStorageRef(id: string) {\n    return this.storage.ref().child(HAPTIC_STORAGE_PATH + id);\n  }\n\n  deleteHapticFileFromStorage(id: string) {\n    this.storage.ref().child(HAPTIC_STORAGE_PATH + id).delete();\n  }\n\n  getAudioStorageRef(id: string) {\n    return this.storage.ref().child(AUDIO_STORAGE_PATH + id);\n  }\n\n  deleteAudioFileFromStorage(id: string) {\n    return this.storage.ref().child(AUDIO_STORAGE_PATH + id).delete();\n  }\n\n  // TODO: make an \"upload file\"\n  // Then upload haptics separately\n\n  async addHaptic(\n    title: string,\n    description: string,\n    tags: string[],\n    hapticFile: File,\n    // TODO: use this\n    audioFile: File | null,\n    audioParams: AudioParams | null,\n    onHapticProgress: (progress: number) => void,\n    onAudioProgress: (progress: number) => void,\n    onError: (error: Error) => void,\n    onComplete: () => void\n  ) {\n    const hapticFileName = hapticFile.name\n    const fileExtension = hapticFileName.split('.').pop();\n\n    // Create new blob with no whitespace and without custom audio\n    // parameters\n    const fileText = await fileToText(hapticFile)\n    const ahapObj = JSON.parse(fileText)\n\n    // Remove events related to custom audio\n    ahapObj['Pattern'] = ahapObj['Pattern'].filter((item : any) => {\n      if ('Event' in item) {\n        if ('EventWaveformPath' in item['Event']) {\n          return false\n        }\n      }\n      return true\n    })\n    const fileTextNoWhitespace = JSON.stringify(ahapObj)\n    const hapticBlob = new Blob([fileTextNoWhitespace], {\n      type: hapticFile.type,\n    })\n\n    // Get storage references\n    const id = uuidv4();\n    const audioRef = this.getAudioStorageRef(id)\n    const hapticRef = this.getHapticStorageRef(id)\n\n    // Create haptic Firestore entry\n    const hapticDoc : HapticDoc = {\n      ID: id,\n      Title: title,\n      Author: 'Tanay',\n      Description: description,\n      Tags: tags,\n\n      BlobType: fileExtension ? fileExtension : '',\n      BlobPath: hapticRef.fullPath\n    }\n    \n    // Create upload task promise for haptics\n    const uploadTaskHaptic = hapticRef.put(hapticBlob)\n    let uploadPromises = [ uploadTaskHaptic ]\n    \n    // Track progess while uploading\n    uploadTaskHaptic.on(app.storage.TaskEvent.STATE_CHANGED, snapshot => {\n      const uploadProgress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      onHapticProgress(uploadProgress);\n    })\n\n    // Do the same for audio, where applicable\n    if (audioFile) {\n      // Modify haptic doc to include-related entries\n      hapticDoc.AudioPath = audioRef.fullPath;\n      if (audioParams) {\n        hapticDoc.AudioParams = audioParams;\n      }\n\n      // Create upload task for audio\n      const uploadTaskAudio = audioRef.put(audioFile)\n      uploadPromises.push(uploadTaskAudio)\n\n      // Track progess while uploading\n      uploadTaskAudio.on(app.storage.TaskEvent.STATE_CHANGED, snapshot => {\n        const uploadProgress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        onAudioProgress(uploadProgress);\n      })\n    }\n\n    // Execute all upload promises\n    Promise.all(uploadPromises).then(snapshots => {\n      // On Complete:\n      // Set file name of uploaded file in metadata\n      hapticRef.updateMetadata({\n        contentDisposition : \"attachment; filename=\" + hapticFileName\n      });\n      \n      const audioFileName = hapticDoc.AudioParams?.FileName\n      if (audioFileName) {\n        audioRef.updateMetadata({\n          contentDisposition : \"attachment; filename=\" + audioFileName\n        });\n      }\n      \n      // Add entry to database\n      this.haptics().doc(id).set(hapticDoc);\n      onComplete();\n    }).catch(onError)\n\n  }\n\n  deleteHaptic(id: string) {\n    this.haptics().doc(id).delete();\n\n    // Delete haptic file from storage\n    this.deleteHapticFileFromStorage(id);\n    \n    // Delete audio file from storage\n    // Will print error in console, but it's okay...\n    this.deleteAudioFileFromStorage(id).catch(_ => console.log(\"ignore error\"))\n  }\n}\n \n// Create context\nconst FirebaseContext = React.createContext<Firebase | null>(null);\n\nexport { FirebaseContext };\nexport default Firebase;\n","import React, { Component, forwardRef } from 'react';\nimport  Firebase  from '../firebase';\nimport { HapticDoc } from '../schema';\nimport MaterialTable from 'material-table';\n\nimport {\n  AddBox,\n  ArrowDownward,\n  Check,\n  ChevronRight,\n  ChevronLeft,\n  Clear,\n  DeleteOutline,\n  Edit,\n  FilterList,\n  FirstPage,\n  LastPage,\n  Remove,\n  SaveAlt,\n  Search,\n  ViewColumn\n} from \"@material-ui/icons\";\n\nconst tableIcons = {\n  Add: forwardRef((props: any, ref: any) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props: any, ref: any) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props: any, ref: any) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props: any, ref: any) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props: any, ref: any) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props: any, ref: any) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props: any, ref: any) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props: any, ref: any) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props: any, ref: any) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props: any, ref: any) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props: any, ref: any) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props: any, ref: any) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props: any, ref: any) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props: any, ref: any) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props: any, ref: any) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props: any, ref: any) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props: any, ref: any) => <ViewColumn {...props} ref={ref} />)\n};\n\ntype HapticListProps = {\n  firebase: Firebase;\n}\n\ntype HapticListState = {\n  data: HapticDoc[];\n}\n\nfunction linkHaptic(rowData: HapticDoc) {\n  return <a download={rowData.Title + \".\" + rowData.BlobType} href={rowData.HapticDownloadURL}>{rowData.Title}</a> \n}\n\nfunction linkAudio(rowData: HapticDoc) {\n  const fileName = rowData.AudioParams?.FileName\n  return <a download={fileName} href={rowData.AudioDownloadURL}>{rowData.AudioParams?.FileName}</a> \n}\nconst tableColumns = [\n  { title: 'Title', field: 'Title', render: (rowData: any) => linkHaptic(rowData as HapticDoc) },\n  { title: 'Audio', field: 'Audio', render: (rowData: any) => linkAudio(rowData as HapticDoc) },\n  { title: 'Author', field: 'Author' },\n  { title: 'Tags', field: 'Tags' },\n  { title: 'Description', field: 'Description' },\n]\n\nclass HapticList extends Component<HapticListProps, HapticListState> {\n  constructor(props: HapticListProps) {\n    super(props);\n\n    this.state = {\n      data: []\n    }\n  }\n\n  componentDidMount() {\n    const { firebase } = this.props;\n    firebase.haptics().onSnapshot(result => {\n      const data = result.docs\n        .map(doc => doc.data() as HapticDoc)\n        .sort(function(a, b) {\n          // Sort by title A to Z\n          const strA = a.Title.toUpperCase(); // ignore upper and lowercase\n          const strB = b.Title.toUpperCase(); // ignore upper and lowercase\n          if (strA < strB) {\n            return -1;\n          }\n          if (strA > strB) {\n            return 1;\n          }\n        \n          // names must be equal\n          return 0;\n        });\n        \n      // Now get any haptic download URL\n      const hapticPromises = data.map(doc => {\n        return firebase.getHapticStorageRef(doc.ID).getDownloadURL()\n      })\n\n      // Now get any audio download URL; return empty promise if no audio\n      const audioPromises = data.map(doc => {\n        if (doc.AudioPath) {\n          return firebase.getAudioStorageRef(doc.ID).getDownloadURL()\n        }\n        else {\n          return Promise.resolve()\n        }\n      })\n\n      Promise.all([Promise.all(hapticPromises), Promise.all(audioPromises)])\n        .then(downloadUrls => {\n          const hapticURLs = downloadUrls[0]\n          const audioURLs = downloadUrls[1]\n\n          let newData = data.map((doc, idx) => {\n            return {\n              ...doc, \n              HapticDownloadURL: hapticURLs[idx],\n              AudioDownloadURL: audioURLs[idx],\n            } as HapticDoc;\n          })\n\n          this.setState({ data: newData });\n        })\n    });\n  }\n \n  render() {\n    const { firebase } = this.props;\n    const { data } = this.state;\n    const tableData = data.map(doc => {\n      return { ...doc, Tags: doc.Tags ? doc.Tags.join(', ') : '' }\n    })\n\n    return (\n      <MaterialTable\n        title=\"Haptic Library\"\n        columns={tableColumns}\n        data={tableData}\n        icons={tableIcons}\n        localization={{ body: { editRow: { deleteText: 'Are you sure you want to delete this haptic effect?' } } }}\n        style={{padding: '20px'}}\n        editable={{\n          onRowDelete: (rowToDelete) =>\n            new Promise((resolve) => {\n              setTimeout(() => {\n                resolve();\n                firebase.deleteHaptic(rowToDelete.ID);\n              }, 600);\n            }),\n        }}\n        components={{\n          Container: props => <>{props.children}</>\n        }}\n        options={{ pageSize: 20 }}\n      />\n    );\n  }\n}\n\nexport default HapticList","import React, { Component } from 'react';\nimport  Firebase  from '../firebase';\n\nimport { Button, Chip, LinearProgress, TextField, Typography } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport ChipInput from 'material-ui-chip-input'\n\nimport { fileToText, formatBytes } from '../utility'\nimport { AudioParams } from '../schema'\n\nenum AlertSeverity {\n  Error = 'error',\n  Warning = 'warning',\n  Info = 'info',\n  Success = 'success'\n}\n\nconst MAX_AHAP_FILE_SIZE_BYTES = 100 * 1024; // 100 KB\nconst MAX_AUDIO_FILE_SIZE_BYTES = 1024 * 1024; // 1 MB\n\ntype AlertDetails = {\n  severity: AlertSeverity\n  text: string;\n}\n\ntype HapticFormProps = {\n  firebase: Firebase;\n}\n\ntype HapticFormState = {\n  hapticFile: File | null;\n  audioFile: File | null;\n  audioParams: AudioParams | null;\n\n  title: string;\n  description: string;\n  tags: string[];\n\n  // 0 to 100\n  uploadProgressHaptic: number | null;\n  uploadProgressAudio: number | null;\n\n  alertDict: { [key: string]: AlertDetails }\n}\n\nconst initState : HapticFormState = {\n  hapticFile: null,\n  audioFile: null,\n  audioParams: null,\n  title: '',\n  description: '',\n  tags: [],\n  uploadProgressHaptic: null,\n  uploadProgressAudio: null,\n  alertDict: {}\n}\n\nconst keyCodes = {\n  space: 32,\n  comma: 188\n}\n\nconst inputStyle : React.CSSProperties = {\n  maxWidth: '360px',\n  marginTop: '20px',\n  marginBottom: '20px',\n  display: 'flex',\n  flexWrap: 'wrap'\n}\n\nclass HapticForm extends Component<HapticFormProps, HapticFormState> {\n  constructor(props: HapticFormProps) {\n    super(props);\n    this.state = { ...initState }\n  }\n\n  onAudioFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    const audioFile = files ? files[0] : null;\n\n    if(!audioFile) {\n      this.setState({ audioFile });\n      return;\n    }\n\n    let alertDict = Object.assign({}, this.state.alertDict)\n    const alertKey = 'Audio File Error'\n\n    if (audioFile.size > MAX_AUDIO_FILE_SIZE_BYTES) {\n      alertDict[alertKey] = {\n        severity: AlertSeverity.Error,\n        text: `Please limit audio file size to ${formatBytes(MAX_AUDIO_FILE_SIZE_BYTES)}.`\n      }\n    }\n    else {\n      delete alertDict[alertKey]\n    }\n\n    this.setState({ \n      audioFile,\n      alertDict\n    })\n  }\n\n  onHapticFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    const hapticFile = files ? files[0] : null;\n  \n    if(!hapticFile) {\n      this.setState({ hapticFile });\n      return;\n    }\n\n    let alertDict = Object.assign({}, this.state.alertDict)\n    const alertKey = 'Haptic File Error'\n\n    if (hapticFile.size > MAX_AHAP_FILE_SIZE_BYTES) {\n      alertDict[alertKey] = {\n        severity: AlertSeverity.Error, \n        text: `Please limit haptic (.ahap) file size to ${formatBytes(MAX_AHAP_FILE_SIZE_BYTES)}.` \n      }\n\n      this.setState({ \n        hapticFile,\n        alertDict\n      })\n      return;\n    }\n\n    // Get title from file name\n    const title = hapticFile.name.split('.')[0]\n\n    fileToText(hapticFile).then(text => {\n      try {\n        const jsonObj = JSON.parse(text);\n\n        // Check if JSON is valid AHAP format\n        // See: https://developer.apple.com/documentation/corehaptics/representing_haptic_patterns_in_ahap_files\n        if (!('Pattern' in jsonObj) || !('Version' in jsonObj)) {\n          throw new Error(\"Haptic file is not in valid AHAP format.\")\n        }\n\n        // Read metadata from AHAP file\n        let description = ''\n        if ('Metadata' in jsonObj) {\n          const metadata = jsonObj['Metadata']\n          if ('Description' in metadata) {\n            description = metadata['Description']\n          }\n        }\n        \n        // Remove any alert\n        let alertDict = Object.assign({}, this.state.alertDict)\n        delete alertDict[alertKey]\n          \n        this.setState({ \n          hapticFile,\n          audioParams: getAudioParams(jsonObj),\n          title,\n          description,\n          alertDict\n        })\n      }\n      catch(e) {\n        // Not valid AHAP format\n        alertDict[alertKey] = {\n          severity: AlertSeverity.Error,\n          text: \"Haptic file is not in valid AHAP format.\" \n        }\n        this.setState({ alertDict })\n        console.log(e);\n      }\n    })\n  }\n \n  onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    const { firebase } = this.props;\n    const { audioFile, audioParams, description, hapticFile, tags, title } = this.state;\n \n    event.preventDefault();\n\n    let alertDict = Object.assign({}, this.state.alertDict)\n    const alertKey = 'Upload Error'\n\n    if (title.length === 0) {\n      alertDict[alertKey] = { \n        severity: AlertSeverity.Error,\n        text: \"Please enter a title.\" \n      }\n      this.setState({ alertDict })\n      return;\n    }\n\n    if (!hapticFile) {\n      alertDict[alertKey] = { \n        severity: AlertSeverity.Error,\n        text: \"Please upload an AHAP file.\" \n      }\n      this.setState({ alertDict })\n      return;\n    }\n\n    const onHapticProgress = (progress: number) => {\n      this.setState({ uploadProgressHaptic: progress });\n    }\n\n    const onAudioProgress = (progress: number) => {\n      this.setState({ uploadProgressAudio: progress });\n    }\n\n    const onError = (error: Error) => {}\n\n    const onComplete = () => {\n      // Reset state to clear form\n      alertDict[alertKey] = { \n        severity: AlertSeverity.Success,\n        text: `Uploaded ${title}!`\n      }\n      this.setState({ ...initState, alertDict });\n    };\n\n    // TODO: add audio file\n    firebase.addHaptic(\n      title,\n      description,\n      tags,\n      hapticFile,\n      audioFile,\n      audioParams,\n      onHapticProgress,\n      onAudioProgress,\n      onError,\n      onComplete\n    );\n  }\n\n  render() {\n    const {\n      alertDict,\n      audioParams,\n      description,\n      hapticFile,\n      audioFile,\n      tags,\n      title,\n      uploadProgressAudio,\n      uploadProgressHaptic\n    } = this.state;\n\n    return (\n      <>\n        <Typography variant=\"h6\">Add AHAP Entry</Typography>\n        <form onSubmit={this.onSubmit}>\n          <Button\n            variant=\"outlined\"\n            component=\"label\"\n            color=\"primary\"\n            style={inputStyle}\n          >\n            Upload AHAP File\n            <input\n              id=\"haptic-file\"\n              name=\"Haptic File\"\n              type=\"file\"\n              accept=\".ahap,.json\"\n              style={{ display: 'none' }}\n              onChange={this.onHapticFile}\n            />\n          </Button>\n          { hapticFile && <Chip style={inputStyle} label={'Selected: ' + hapticFile.name} /> }\n\n          <Button\n            variant=\"outlined\"\n            component=\"label\"\n            color=\"primary\"\n            style={inputStyle}\n          >\n            Upload Audio File\n            <input\n              id=\"audio-file\"\n              name=\"Audio File\"\n              type=\"file\"\n              accept=\"audio/*\"\n              style={{ display: 'none' }}\n              onChange={this.onAudioFile}\n            />\n          </Button>\n          { audioFile && <Chip style={inputStyle} label={'Selected: ' + audioFile.name} /> }\n          { !audioFile && audioParams && audioParams.FileName &&\n            <Alert severity={AlertSeverity.Warning}>{\n              `This AHAP file requires the audio file ${audioParams.FileName}. \n              Please upload it if you would like to include an audio sample.`\n            }\n            </Alert> \n          }\n\n          <TextField\n            name=\"Title\"\n            value={title}\n            onChange={(event) => this.setState({ title: event.target.value })}\n            type=\"text\"\n            label=\"Title\"\n            variant=\"outlined\"\n            style={inputStyle}\n          />\n          <TextField\n            name=\"Description\"\n            value={description}\n            onChange={(event) => this.setState({ description: event.target.value })}\n            type=\"text\"\n            label=\"Description\"\n            variant=\"outlined\"\n            style={inputStyle}\n          />\n          <ChipInput\n            value={tags}\n            onAdd={(chip) => this.setState({ tags: [...tags, chip ]})}\n            onDelete={(_, idx) => this.setState({ tags: tags.filter((_, i) => i !== idx) })}\n            // onChange={(chips: string[]) => this.setState({ tags: chips })}\n            newChipKeyCodes={[keyCodes.comma, keyCodes.space]}\n            label=\"Tags\"\n            variant=\"outlined\"\n            style={inputStyle}\n          />\n          <Button \n            type=\"submit\" \n            color=\"primary\"\n            variant=\"contained\"\n            style={inputStyle}\n          >\n            Add Haptics\n          </Button>\n          { uploadProgressAudio !== null && \n            <LinearProgress \n              variant=\"determinate\"\n              style={inputStyle}\n              value={uploadProgressAudio}\n            />\n          }\n          { uploadProgressHaptic !== null && \n            <LinearProgress \n              variant=\"determinate\"\n              style={inputStyle}\n              value={uploadProgressHaptic}\n            />\n          }\n          { Object.keys(alertDict) && Object.keys(alertDict).map(key => {\n            const alert = alertDict[key]\n            return <Alert key={key} severity={alert.severity}>{alert.text}</Alert>\n          }) }\n        </form>\n      </>\n    );\n  }\n}\n\nfunction getAudioParams(jsonObj: any) : AudioParams | null {\n  \n  function getAudioCustomEvent(jsonObj : any) : any {\n    // Search for audio and any parameters\n    const hapticPattern : any[] = jsonObj['Pattern']\n    for (let i = 0; i < hapticPattern.length; i++) {\n      const hp = hapticPattern[i];\n      if ('Event' in hp) {\n        const hapticEvent = hp['Event']\n        if ('EventWaveformPath' in hapticEvent) {\n          return hapticEvent;\n        }\n      }\n    }\n    return null\n  }\n\n  // Returns an audio custom event object\n  const audioCustomEvent = getAudioCustomEvent(jsonObj)\n  if (audioCustomEvent === null) {\n    return null\n  }\n\n  let audioParams : AudioParams = {}\n  const audioFilePath = audioCustomEvent['EventWaveformPath']\n  audioParams.FileName = audioFilePath ? audioFilePath.split('/').slice(-1)[0] : null;\n  audioParams.Time = audioCustomEvent['Time'];\n\n  // These are optional\n  if ('EventParameters' in audioCustomEvent) {\n    const eventParameters : any[] = audioCustomEvent['EventParameters']\n    for(let i = 0; i < eventParameters.length; i++) {\n      const param = eventParameters[i]\n      const paramID : string = param['ParameterID']\n      const paramValue = param['ParameterValue']\n      \n      // These may be undefined and that is okay\n      switch (paramID) {\n        case 'AudioBrightness':\n          audioParams.AudioBrightness = paramValue\n          break\n        case 'AudioPan':\n          audioParams.AudioPan = paramValue\n          break\n        case 'AudioPitch':\n          audioParams.AudioPitch = paramValue\n          break\n        case 'AudioVolume':\n          audioParams.AudioVolume = paramValue\n          break\n      }\n    }\n  }\n\n  return audioParams\n}\n\nexport default HapticForm;","// https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial\n\nimport React, { Component } from 'react';\nimport { FirebaseContext } from '../firebase';\nimport HapticList from './HapticList';\nimport HapticForm from './HapticForm';\n\nimport { Container, Paper, Typography } from '@material-ui/core';\n\nconst paperStyle : React.CSSProperties = {\n  padding: '50px',\n  margin: '20px'\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <FirebaseContext.Consumer>\n        {firebase => {\n          if (firebase) {\n            return (\n              <Container maxWidth=\"md\">\n                <Paper style={paperStyle}>\n                  <Typography variant=\"h4\">Haptic Library</Typography>\n                  <br/>\n                  <Typography variant=\"subtitle1\">\n                    Welcome to the Haptic Library! \n                    This tool lets you easily share haptic sensations\n                    designed for <a href=\"https://developer.apple.com/documentation/corehaptics\">iOS Core Haptics</a>, which\n                    is available on iOS 13 and on iPhone 8 or newer (not iPhone SE). To design these experiences, \n                    consider using tools such as {\" \"}\n                    <a href=\"http://ahap.fancypixel.it/\">Captain AHAP</a>{\", \"}\n                    <a href=\"https://composer.lofelt.com/\">Lofelt Composer</a>{\", or \"}\n                    <a href=\"https://medium.com/flawless-app-stories/haptrix-core-haptics-designer-241a47b78cd\">Haptrix</a>.\n                    After uploading, you can then view these sensations in a client app for iOS (ask Tanay for access). \n                  </Typography>\n                </Paper>\n                <Paper style={paperStyle}>\n                  <HapticForm firebase={firebase} />\n                </Paper>\n                <Paper style={paperStyle}>\n                  <HapticList firebase={firebase} />\n                </Paper>\n              </Container>\n            )\n          }\n        }}\n      </FirebaseContext.Consumer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Firebase, { FirebaseContext } from './firebase';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseContext.Provider value = { new Firebase() }>\n      <App />\n    </FirebaseContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}